#!/usr/bin/env python
"""
Run ansible playbook and report results
"""

import os
import sys
from termcolor import colored, cprint

from ansiblereporter import RunnerError
from ansiblereporter.cli import PlaybookScript, create_directory


USAGE = """Run ansible playbook with parsable output from rules

This wrapper script runs a playbook, collecting results from each target
host and only reporting results after everything has been finished.

The results can be formatted on screen, grouped by host and formatted in json,
or written to files in given output directory.
"""


def result_formatter(result,):
    output = ''

    if result.status in ( 'ok', 'error', 'unknown', ):
        status = '%s | %s | %s | %s' % (result.host, result.ansible_status, result.returncode, result.command)
        if result.returncode == 0:
            color = 'green'
        else:
            color = 'red'

        output += colored('%s' % status, color)
        if result.stdout:
            output += colored('\n%s' % result.stdout, color)

    elif result.status == 'facts':
        output += colored('%s | %s | %s | %s' % (result.host, result.ansible_status, result.returncode, result.command), 'cyan')
        for key, value in result.ansible_facts.items():
            output += colored('\n  %s %s' % (key, value), 'cyan')

    else:
        status = '%s | %s | %s | %s' % (result.host, result.ansible_status, result.error, result.command)
        output += colored(status, 'red')
        if result.stdout or result.stderr:
            output += colored('\n%s\n%s' % (result.stdout, result.stderr), 'red')

    return output

def result_formatter_json(result):
    return result.to_json()


script = PlaybookScript(description=USAGE)
script.add_argument('--json', action='store_true', help='Show results in json format')
script.add_argument('--by-host', action='store_true', help='Store results to separate files')
script.add_argument('--output-file', help='Result output file')
script.add_argument('--output-directory', help='Result output directory')

try:
    args = script.parse_args()
    data = script.run(args)
except RunnerError, emsg:
    script.exit(1, emsg)

if args.by_host and not args.output_directory:
    script.exit(1, 'Argument --by-host requires output directory')

if args.by_host:
    try:
        create_directory(args.output_directory)
    except RunnerError, emsg:
        script.exit(1, emsg)

    for result in data.results['contacted']:
        if args.json:
            result.write_to_directory(args.output_directory, result_formatter_json, 'json')
        else:
            result.write_to_directory(args.output_directory, result_formatter, 'txt')

elif args.output_file:
    try:
        create_directory(os.path.dirname(args.output_file))
    except RunnerError, emsg:
        script.exit(1, emsg)

    data.write_to_file(args.output_file, formatter=result_formatter, json=args.json)

else:
    if args.json:
        script.message('%s' % data.to_json())

    else:
        for result in data.results['contacted']:
            if result.module_name == 'setup' and not args.show_facts:
                continue
            script.message('%s\n' % result.format(result_formatter))

        for result in data.results['dark']:
            if result.module_name == 'setup' and not args.show_facts:
                continue
            script.error('%s\n' % result.format(result_formatter))


