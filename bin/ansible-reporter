#!/usr/bin/env python
"""
Run ansible runner with custom outputs
"""

import os
import sys
from termcolor import colored, cprint

from ansiblereporter import RunnerError
from ansiblereporter.cli import AnsibleScript, create_directory

USAGE = """Run ansible command with parsable output

This wrapper runs a command with ansible, collecting results from the commands
on each host and writing output to screen after all commands are finished.

By default the command outputs (mostly) ansible compatible output, but making sure
output from each host is printed in order. You can also dump the results in json or
write them to output files.
"""
def result_formatter_nocolors(result):
    output = ''
    if result.status in ( 'ok', 'error', 'unknown', ):
        status = '%s | %s | rc=%d >>' % (result.host, result.ansible_status, result.returncode)
        output += '%s\n%s' % (status, result.stdout)

    else:
        status = '%s | %s => %s' % (result.host, result.ansible_status, result.error)
        output += '%s\n%s\n%s' % (status, result.stdout, result.stderr)

    return output

def result_formatter_colors(result):
    output = ''

    if result.status in ( 'ok', 'error', 'unknown', ):
        status = '%s | %s | rc=%d >>' % (result.host, result.ansible_status, result.returncode)
        if result.returncode == 0:
            color = 'green'
        else:
            color = 'red'
        output += colored(status, color)
        output += colored('\n%s' % result.stdout, color)

    else:
        status = '%s | %s => %s' % (result.host, result.ansible_status, result.error)
        output += colored(status, 'red')
        if result.stdout or result.stderr:
            output += colored('\n%s\n%s' % (result.stdout, result.stderr), 'red')

    return output

def result_formatter_json(result):
    return result.to_json()


script = AnsibleScript(description=USAGE)
script.add_argument('-n', '--nocolors', action='store_true', help='Show results without colors')
script.add_argument('--json', action='store_true', help='Show results in json format')
script.add_argument('--by-host', action='store_true', help='Store results to separate files')
script.add_argument('--output-file', help='Result output file')
script.add_argument('--output-directory', help='Result output directory')

try:
    args = script.parse_args()
    data = script.run(args)
except RunnerError, emsg:
    script.exit(1, emsg)

if args.by_host and not args.output_directory:
    script.exit(1, 'Argument --by-host requires output directory')

if args.by_host:
    try:
        create_directory(args.output_directory)
    except RunnerError, emsg:
        script.exit(1, emsg)

    for result in sorted(data.results['contacted'], lambda a, b: cmp(a.host, b.host)):
        if args.json:
            result.write_to_directory(args.output_directory, result_formatter_json, 'json')
        else:
            result.write_to_directory(args.output_directory, result_formatter_nocolors, 'txt')

elif args.output_file:
    try:
        create_directory(os.path.dirname(args.output_file))
    except RunnerError, emsg:
        script.exit(1, emsg)

    data.write_to_file(args.output_file, formatter=result_formatter_nocolors, json=args.json)

else:
    if args.json:
        script.message('%s' % data.to_json())

    else:
        for result in sorted(data.results['contacted'], lambda a, b: cmp(a.host, b.host)):
            if args.nocolors:
                script.message('%s\n' % result.format(result_formatter_nocolors))
            else:
                script.message('%s\n' % result.format(result_formatter_colors))

        for result in data.results['dark']:
            if args.nocolors:
                script.error('%s\n' % result.format(result_formatter_nocolors))
            else:
                script.error('%s\n' % result.format(result_formatter_colors))
