#!/usr/bin/env python
"""
Test ansible report runner
"""

import os
import sys
from termcolor import colored, cprint

try:
    from ansiblereporter import __version__
except ImportError:
    BASE_DIR = os.sep.join(os.path.realpath(__file__).split(os.sep)[:-2])
    moduledir = os.path.join(BASE_DIR, 'ansiblereporter')
    if os.path.isdir(moduledir):
        sys.path.insert(0, BASE_DIR)
    from ansiblereporter import __version__

from ansiblereporter import ReportRunnerError
from ansiblereporter.cli import PlaybookScript, create_directory

def result_formatter(result,):
    output = ''

    if result.status in ( 'ok', 'error', 'unknown', ):
        status = '%s | %s | %s | %s' % (result.host, result.ansible_status, result.returncode, result.command)
        if result.returncode == 0:
            color = 'green'
        else:
            color = 'red'

        output += colored('%s' % status, color)
        if result.stdout:
            output += colored('\n%s' % result.stdout, color)

    elif result.status == 'facts':
        output += colored('%s | %s | %s | %s' % (result.host, result.ansible_status, result.returncode, result.command), 'cyan')
        for key, value in result.ansible_facts.items():
            output += colored('\n  %s %s' % (key, value), 'cyan')

    else:
        status = '%s | %s | %s | %s' % (result.host, result.ansible_status, result.error, result.command)
        output += colored(status, 'red')
        if result.stdout or result.stderr:
            output += colored('\n%s\n%s' % (result.stdout, result.stderr), 'red')

    return output

def result_formatter_json(result):
    return result.to_json()


script = PlaybookScript()
script.add_argument('--json', action='store_true', help='Show results in json format')
script.add_argument('--by-host', action='store_true', help='Store results to separate files')
script.add_argument('--output-file', help='Result output file')
script.add_argument('--output-directory', help='Result output directory')

try:
    args, data = script.run()
except ReportRunnerError, emsg:
    script.exit(1, emsg)

if args.by_host and not args.output_directory:
    script.exit(1, 'Argument --by-host requires output directory')

if args.by_host:
    try:
        create_directory(args.output_directory)
    except ReportRunnerError, emsg:
        script.exit(1, emsg)

    for result in data.results['contacted']:
        if args.json:
            result.write_to_directory(args.output_directory, result_formatter_json, 'json')
        else:
            result.write_to_directory(args.output_directory, result_formatter, 'txt')

elif args.output_file:
    try:
        create_directory(os.path.dirname(args.output_file))
    except ReportRunnerError, emsg:
        script.exit(1, emsg)

    data.write_to_file(args.output_file, formatter=result_formatter, json=args.json)

else:
    if args.json:
        script.message('%s' % data.to_json())

    else:
        for result in data.results['contacted']:
            if result.module_name == 'setup' and not args.show_facts:
                continue
            script.message('%s\n' % result.format(result_formatter))

        for result in data.results['dark']:
            if result.module_name == 'setup' and not args.show_facts:
                continue
            script.error('%s\n' % result.format(result_formatter))


